window.SIDEBAR_ITEMS = {"constant":[["FAT_PTR_ADDR","The first half of a fat pointer."],["FAT_PTR_EXTRA","The second half of a fat pointer."],["MAX_SIMD_LANES","The maximum supported number of lanes in a SIMD vector."]],"enum":[["FnAbiError","Error produced by attempting to compute or adjust a `FnAbi`."],["FnAbiRequest",""],["LayoutError",""],["SavedLocalEligibility","Overlap eligibility and variant assignment for each GeneratorSavedLocal."],["SizeSkeleton","Type size “skeleton”, i.e., the only information determining a type’s size. While this is conservative, (aside from constant sizes, only pointers, newtypes thereof and null pointer optimized enums are allowed), it is enough to statically check common use cases of transmute."],["StructKind",""]],"fn":[["adjust_for_rust_scalar",""],["conv_from_spec_abi",""],["fn_abi_of_fn_ptr",""],["fn_abi_of_instance",""],["fn_can_unwind","Calculates whether a function’s ABI can unwind or not."],["invert_mapping",""],["layout_of",""],["make_thin_self_ptr",""],["provide",""]],"struct":[["LayoutCx",""]],"trait":[["FnAbiOf","Blanket extension trait for contexts that can compute `FnAbi`s."],["FnAbiOfHelpers","Trait for contexts that want to be able to compute `FnAbi`s. This automatically gives access to `FnAbiOf`, through a blanket `impl`."],["HasParamEnv",""],["HasTyCtxt",""],["IntegerExt",""],["LayoutOf","Blanket extension trait for contexts that can compute layouts of types."],["LayoutOfHelpers","Trait for contexts that want to be able to compute layouts of types. This automatically gives access to `LayoutOf`, through a blanket `impl`."],["MaybeResult",""],["PrimitiveExt",""]],"type":[["TyAndLayout",""]]};