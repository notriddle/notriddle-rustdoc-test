window.SIDEBAR_ITEMS = {"enum":[["Applicability","Indicates the confidence in the correctness of a suggestion."],["BuiltinLintDiagnostics",""],["FutureIncompatibilityReason","The reason for future incompatibility"],["Level","Setting for how to handle a lint."],["LintExpectationId","Each lint expectation has a `LintExpectationId` assigned by the `LintLevelsBuilder`. Expected `Diagnostic`s get the lint level `Expect` which stores the `LintExpectationId` to match it with the actual expectation later on."]],"macro":[["declare_lint","Declares a static item of type `&'static Lint`."],["declare_lint_pass","Declares a type named `$name` which implements `LintPass`. To the right of `=>` a comma separated list of `Lint` statics is given."],["declare_tool_lint",""],["impl_lint_pass","Implements `LintPass for $ty` with the given list of `Lint` statics."],["lint_array","Declares a static `LintArray` and return it as an expression."],["pluralize",""]],"mod":[["builtin","Some lints that are built in to the compiler."]],"struct":[["BufferedEarlyLint","Lints that are buffered up early on in the `Session` before the `LintLevels` is calculated."],["FutureIncompatibleInfo","Extra information for a future incompatibility lint."],["Lint","Specification of a single lint."],["LintBuffer",""],["LintId","Identifies a lint known to the compiler."]],"trait":[["LintPass",""]],"type":[["LintArray",""]]};