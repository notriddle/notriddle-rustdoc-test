window.SIDEBAR_ITEMS = {"fn":[["build_const",""],["build_enum",""],["build_external_function",""],["build_external_trait",""],["build_impl","Inline an `impl`, inherent or of a trait. The `did` must be for an `impl`."],["build_impls","Builds all inherent implementations of an ADT (struct/union/enum) or Trait item/path/reexport."],["build_macro",""],["build_module",""],["build_module_items",""],["build_static",""],["build_struct",""],["build_type_alias",""],["build_union",""],["filter_non_trait_generics","A trait’s generics clause actually contains all of the predicates for all of its associated types as well. We specifically move these clauses to the associated types instead when displaying, so when we’re generating the generics for the trait itself we need to be sure to remove them. We also need to remove the implied “recursive” Self: Trait bound."],["load_attrs",""],["merge_attrs","`parent_module` refers to the parent of the re-export, not the original item"],["print_inlined_const",""],["record_extern_fqn","Record an external fully qualified name in the external_paths cache."],["record_extern_trait",""],["separate_supertrait_bounds","Supertrait bounds for a trait are also listed in the generics coming from the metadata for a crate, so we want to separate those out and create a new list of explicit supertrait bounds to render nicely."],["try_inline","Attempt to inline a definition into this AST."],["try_inline_glob",""]]};