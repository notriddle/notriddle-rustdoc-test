window.SIDEBAR_ITEMS = {"fn":[["provide",""]],"mod":[["check_attr","This module implements some validity checks for attributes. In particular it verifies that `#[inline]` and `#[repr]` attributes are attached to items that actually support them and if there are conflicts between multiple such attributes attached to the same item."],["check_const","This pass checks HIR bodies that may be evaluated at compile-time (e.g., `const`, `static`, `const fn`) for structured control flow (e.g. `if`, `while`), which is forbidden in a const context."],["dead",""],["debugger_visualizer","Detecting usage of the `#[debugger_visualizer]` attribute."],["diagnostic_items","Detecting diagnostic items."],["entry",""],["errors",""],["hir_id_validator",""],["hir_stats",""],["lang_items","Detecting language items."],["layout_test",""],["lib_features","Detecting lib features (i.e., features that are not lang features)."],["liveness","A classic liveness analysis based on dataflow over the AST. Computes, for each local variable in a function, whether that variable is live at a given point. Program execution points are identified by their IDs."],["loops",""],["naked_functions","Checks validity of naked functions."],["reachable",""],["stability","A pass that annotates every item and method with its stability level, propagating default levels lexically from parent to children ast nodes."],["upvars","Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s."],["weak_lang_items","Validity checking for weak lang items"]]};