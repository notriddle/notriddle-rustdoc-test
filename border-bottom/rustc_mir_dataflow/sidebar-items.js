window.SIDEBAR_ITEMS = {"enum":[["CallReturnPlaces","List of places that are written to after a successful (non-unwind) return from a `Call` or `InlineAsm`."]],"fn":[["has_rustc_mir_with",""],["visit_results","Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the dataflow state at that location."]],"mod":[["drop_flag_effects",""],["elaborate_drops",""],["errors",""],["fmt","Custom formatting traits used when outputting Graphviz diagrams with the results of a dataflow analysis."],["framework","A framework that can express both gen-kill and generic dataflow problems."],["graphviz","A helpful diagram for debugging dataflow problems."],["impls","Dataflow analyses are built upon some interpretation of the bitvectors attached to each basic block, represented via a zero-sized structure."],["indexes",""],["lattice","Traits used to represent lattices for use as the domain of a dataflow analysis."],["move_paths",""],["rustc_peek",""],["storage",""],["un_derefer",""]],"struct":[["Backward","Dataflow that runs from the exit of a block (the terminator), to its entry (the first statement)."],["Engine","A solver for dataflow problems."],["Forward","Dataflow that runs from the entry of a block (the first statement), to its exit (terminator)."],["MoveDataParamEnv",""],["Results","A dataflow analysis that has converged to fixpoint."],["ResultsCursor","Allows random access inspection of the results of a dataflow analysis."]],"trait":[["Analysis","A dataflow problem with an arbitrarily complex transfer function."],["AnalysisDomain","Defines the domain of a dataflow problem."],["Direction",""],["GenKill","The legal operations for a transfer function in a gen/kill problem."],["GenKillAnalysis","A gen/kill dataflow problem."],["JoinSemiLattice","A partially ordered set that has a least upper bound for any pair of elements in the set."],["ResultsVisitable","Things that can be visited by a `ResultsVisitor`."],["ResultsVisitor",""],["SwitchIntEdgeEffects","A type that records the edge-specific effects for a `SwitchInt` terminator."]],"type":[["ResultsRefCursor","A `ResultsCursor` that borrows the underlying `Results`."]]};