window.SIDEBAR_ITEMS = {"fn":[["expr_block","Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`. Also takes an `Option<String>` which can be put inside the braces."],["first_char_in_first_line",""],["first_line_of_span","Returns a new Span that extends the original Span to the first non-whitespace char of the first line."],["indent_of","Returns the indentation of the line of a span"],["is_present_in_source",""],["position_before_rarrow","Returns the position just before rarrow"],["reindent_multiline","Reindent a multiline string with possibility of ignoring the first line."],["reindent_multiline_inner",""],["snippet","Converts a span to a code snippet if available, otherwise returns the default."],["snippet_block","Converts a span (from a block) to a code snippet if available, otherwise use default."],["snippet_block_with_applicability","Same as `snippet_block`, but adapts the applicability level by the rules of `snippet_with_applicability`."],["snippet_indent","Gets a snippet of the indentation of the line of a span"],["snippet_opt","Converts a span to a code snippet. Returns `None` if not available."],["snippet_with_applicability","Same as [`snippet`], but it adapts the applicability level by following rules:"],["snippet_with_context","Same as `snippet_with_applicability`, but first walks the span up to the given context. This will result in the macro call, rather then the expansion, if the span is from a child context. If the span is not from a child context, it will be used directly instead."],["snippet_with_macro_callsite","Same as `snippet`, but should only be used when itâ€™s clear that the input span is not a macro argument."],["trim_span","Trims the whitespace from the start and the end of the span."],["walk_span_to_context","Walks the span up to the target context, thereby returning the macro call site if the span is inside a macro expansion, or the original span if it is not. Note this will return `None` in the case of the span being in a macro expansion, but the target context is from expanding a macro argument."],["without_block_comments","Removes block comments from the given `Vec` of lines."]]};