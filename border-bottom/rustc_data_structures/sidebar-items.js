window.SIDEBAR_ITEMS = {"fn":[["cold_path",""]],"macro":[["define_id_collections",""],["define_stable_id_collections",""],["enum_from_u32",""],["parallel",""],["rustc_erase_owner",""],["static_assert_size","Type size assertion. The first argument is a type and the second argument is its expected size."]],"mod":[["atomic_ref",""],["base_n",""],["binary_search_util",""],["captures",""],["fingerprint",""],["flock","Simple file-locking apis for each OS."],["frozen","An immutable, owned value (except for interior mutability)."],["functor",""],["fx",""],["graph",""],["intern",""],["jobserver",""],["macros",""],["map_in_place",""],["memmap",""],["obligation_forest","The `ObligationForest` is a utility data structure used in trait matching to track the set of outstanding obligations (those not yet resolved to success or error). It also tracks the “backtrace” of each pending obligation (why we are trying to figure this out in the first place)."],["owning_ref","An owning reference."],["profiling","Rust Compiler Self-Profiling"],["sharded",""],["sip128","This is a copy of `core::hash::sip` adapted to providing 128 bit hashes."],["small_c_str",""],["small_str",""],["snapshot_map",""],["snapshot_vec","A utility class for implementing “snapshottable” things; a snapshottable data structure permits you to take a snapshot (via `start_snapshot`) and then, after making some changes, elect either to rollback to the start of the snapshot or commit those changes."],["sorted_map",""],["sso",""],["stable_hasher",""],["stack",""],["steal",""],["svh","Calculation and management of a Strict Version Hash for crates"],["sync","This module defines types which are thread safe if cfg!(parallel_compiler) is true."],["tagged_ptr","This module implements tagged pointers."],["temp_dir",""],["tiny_list","A singly-linked list."],["transitive_relation",""],["undo_log","Module which contains the snapshot/rollback functionality of the `ena` data structures."],["unhash",""],["unify","Union-find implementation. The main type is `UnificationTable`."],["vec_linked_list",""],["vec_map",""],["work_queue",""]],"struct":[["AtomicRef","This is essentially an `AtomicPtr` but is guaranteed to always be valid"],["OnDrop",""]]};