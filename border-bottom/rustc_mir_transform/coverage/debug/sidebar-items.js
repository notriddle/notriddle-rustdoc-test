window.SIDEBAR_ITEMS = {"constant":[["NESTED_INDENT",""],["RUSTC_COVERAGE_DEBUG_OPTIONS",""]],"fn":[["bcb_to_string_sections",""],["bool_option_val",""],["counter_format_option_val",""],["debug_options",""],["dump_coverage_graphviz","Generates the MIR pass coverage-specific graphviz dump file."],["dump_coverage_spanview","Generates the MIR pass `CoverageSpan`-specific spanview dump file."],["span_viewables","Converts the computed `BasicCoverageBlockData`s into `SpanViewable`s."],["term_type","Returns a simple string representation of a `TerminatorKind` variant, independent of any values it might hold."]],"struct":[["DebugCounter","A non-public support class to `DebugCounters`."],["DebugCounters","If enabled, this struct maintains a map from `CoverageKind` IDs (as `ExpressionOperandId`) to the `CoverageKind` data and optional label (normally, the counter’s associated `BasicCoverageBlock` format string, if any)."],["DebugOptions","Parses and maintains coverage-specific debug options captured from the environment variable “RUSTC_COVERAGE_DEBUG_OPTIONS”, if set."],["ExpressionFormat",""],["GraphvizData","If enabled, this data structure captures additional debugging information used when generating a Graphviz (.dot file) representation of the `CoverageGraph`, for debugging purposes."],["UsedExpressions","If enabled, this struct captures additional data used to track whether expressions were used, directly or indirectly, to compute the coverage counts for all `CoverageSpan`s, and any that are not used are retained in the `unused_expressions` Vec, to be included in debug output (logs and/or a `CoverageGraph` graphviz output)."]]};