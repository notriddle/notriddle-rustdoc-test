window.SIDEBAR_ITEMS = {"enum":[["DefIdOrName",""],["Diverges","Tracks whether executing a node may exit normally (versus return/break/panic, which “diverge”, leaving dead code in their wake). Tracked semi-automatically (through type variables marked as diverging), with some manual adjustments for control-flow primitives (approximating a CFG)."],["Expectation","When type-checking an expression, we propagate downward whatever type hint we are able in the form of an `Expectation`."],["Needs",""],["PlaceOp",""],["TupleArgumentsFlag","Controls whether the arguments are tupled. This is used for the call operator."]],"fn":[["adt_destructor",""],["bad_non_zero_sized_fields","Emit an error when encountering two or more non-zero-sized fields in a transparent enum."],["bad_variant_count","Emit an error when encountering two or more variants in a transparent enum."],["bounds_from_generic_predicates","Re-sugar `ty::GenericPredicates` in a way suitable to be used in structured suggestions."],["default_body_is_unstable",""],["diagnostic_only_typeck","Used only to get `TypeckResults` for type inference during error recovery. Currently only used for type inference of `static`s and `const`s to avoid type cycle errors."],["fatally_break_rust",""],["fn_maybe_err",""],["fn_sig_suggestion","Return placeholder code for the given function."],["get_owner_return_paths","Given a `DefId` for an opaque type in return position, find its parent item’s return expressions."],["has_expected_num_generic_args",""],["has_typeck_results",""],["maybe_check_static_with_link_section",""],["missing_items_err",""],["missing_items_must_implement_one_of_err",""],["potentially_plural_count",""],["primary_body_of","If this `DefId` is a “primary tables entry”, returns `Some((body_id, body_ty, fn_sig))`. Otherwise, returns `None`."],["provide",""],["report_forbidden_specialization",""],["report_unexpected_variant_res",""],["suggestion_signature","Return placeholder code for the given associated item. Similar to `ty::AssocItem::suggestion`, but appropriate for use as the code snippet of a structured suggestion."],["typeck",""],["typeck_const_arg",""],["typeck_item_bodies",""],["typeck_with_fallback",""],["used_trait_imports",""]],"mod":[["_match",""],["autoderef","Some helper functions for `AutoDeref`"],["callee",""],["cast","Code for type-checking cast expressions."],["check",""],["closure","Code for type-checking closure expressions."],["coercion","Type Coercion"],["compare_method",""],["demand",""],["diverges",""],["dropck",""],["expectation",""],["expr","Type checking expressions."],["fallback",""],["fn_ctxt",""],["gather_locals",""],["generator_interior","This calculates the types which has storage which lives across a suspension point in a generator from the perspective of typeck. The actual types used at runtime is calculated in `rustc_mir_transform::generator` and may be a subset of the types computed here."],["inherited",""],["intrinsic","Type-checking for the rust-intrinsic and platform-intrinsic intrinsics that the compiler exposes."],["intrinsicck",""],["method","Method lookup: the secret sauce of Rust. See the rustc dev guide for more information."],["op","Code related to processing overloaded binary and unary operators."],["pat",""],["place_op",""],["region","This file builds up the `ScopeTree`, which describes the parent links in the region hierarchy."],["rvalue_scopes",""],["upvar","Inferring borrow kinds for upvars"],["wfcheck",""],["writeback",""]],"struct":[["BreakableCtxt",""],["EnclosingBreakables",""],["FnCtxt","The `FnCtxt` stores type-checking context needed to type-check bodies of functions, closures, and `const`s, including performing type inference with `InferCtxt`."],["GeneratorTypes","When `check_fn` is invoked on a generator (i.e., a body that includes yield), it returns back some information about the yield points."],["Inherited","Closures defined within the function. For example:"],["InheritedBuilder","A temporary returned by `Inherited::build(...)`. This is necessary for multiple `InferCtxt` to share the same `in_progress_typeck_results` without using `Rc` or something similar."],["LocalTy","The type of a local binding, including the revealed type for anon types."],["UnsafetyState",""]]};