window.SIDEBAR_ITEMS = {"enum":[["AttemptLocalParseRecovery",""],["BlockMode",""],["Capturing","Controls how we capture tokens. Capturing can be expensive, so we try to avoid performing capturing in cases where we will never need an `AttrTokenStream`."],["CommaRecoveryMode","Whether or not to recover a `a, b` when parsing patterns as `(a, b)` or that and `a | b`."],["FlatToken","A helper struct used when building an `AttrTokenStream` from a `LazyAttrTokenStream`. Both delimiter and non-delimited tokens are stored as `FlatToken::Token`. A vector of `FlatToken`s is then ‘parsed’ to build up an `AttrTokenStream` with nested `AttrTokenTree::Delimited` tokens."],["FollowedByType",""],["ForceCollect","Whether or not we should force collection of tokens for an AST node, regardless of whether or not it has attributes"],["NtOrTt",""],["PathStyle","Specifies how to parse a path."],["RecoverColon","Whether or not to recover a `:` when parsing patterns that were meant to be paths."],["RecoverComma","Whether or not to recover a `,` when parsing or-patterns."],["SemiColonMode",""],["TokenExpectType",""],["TokenType",""],["TrailingToken",""]],"fn":[["emit_unclosed_delims",""],["make_unclosed_delims_error",""],["token_descr",""],["token_descr_opt",""]],"mod":[["attr",""],["attr_wrapper",""],["diagnostics",""],["expr",""],["generics",""],["item",""],["nonterminal",""],["pat",""],["path",""],["stmt",""],["ty",""]],"struct":[["AttrWrapper","A wrapper type to ensure that the parser handles outer attributes correctly. When we parse outer attributes, we need to ensure that we capture tokens for the attribute target. This allows us to perform cfg-expansion on a token stream before we invoke a derive proc-macro."],["CaptureState",""],["ClosureSpans","Stores span information about a closure."],["Parser",""],["Restrictions",""],["SeqSep","A sequence separator."],["TokenCursor",""],["TokenCursorFrame",""]],"type":[["ReplaceRange","Indicates a range of tokens that should be replaced by the tokens in the provided vector. This is used in two places during token collection:"]]};