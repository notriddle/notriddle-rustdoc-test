window.SIDEBAR_ITEMS = {"constant":[["SYMBOL_OFFSET",""],["SYMBOL_PREINTERNED",""],["SYMBOL_STR",""],["TAG_EXPN_DATA",""],["TAG_FILE_FOOTER",""],["TAG_FULL_SPAN",""],["TAG_PARTIAL_SPAN",""],["TAG_RELATIVE_SPAN",""],["TAG_SYNTAX_CONTEXT",""]],"fn":[["decode_tagged",""],["encode_query_results",""]],"macro":[["encoder_methods",""],["impl_ref_decoder",""]],"mod":[["__ty_decoder_impl",""]],"struct":[["AbsoluteBytePos",""],["CacheDecoder","A decoder that can read from the incremental compilation cache. It is similar to the one we use for crate metadata decoding in that it can rebase spans and eventually will also handle things that contain `Ty` instances."],["CacheEncoder","An encoder that can write to the incremental compilation cache."],["EncodedSourceFileId","An `EncodedSourceFileId` is the same as a `StableSourceFileId` except that the source crate is represented as a [StableCrateId] instead of as a `CrateNum`. This way `EncodedSourceFileId` can be encoded and decoded without any additional context, i.e. with a simple `opaque::Decoder` (which is the only thing available when decoding the cacheâ€™s [Footer]."],["Footer",""],["OnDiskCache","Provides an interface to incremental compilation data cached from the previous compilation session. This data will eventually include the results of a few selected queries (like `typeck` and `mir_optimized`) and any side effects that have been emitted during a query."],["SourceFileIndex",""]],"trait":[["DecoderWithPosition",""]],"type":[["EncodedDepNodeIndex",""]]};