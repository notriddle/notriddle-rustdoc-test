window.SIDEBAR_ITEMS = {"constant":[["FORMAT_MACRO_DIAG_ITEMS",""]],"enum":[["Count","Used by width and precision specifiers."],["FormatParamKind",""],["PanicExpn",""]],"fn":[["expn_backtrace","Returns an iterator of expansions that created the given span"],["expn_is_local","Checks whether the expansion is the root expansion or a locally defined macro"],["find_assert_args","Finds the arguments of an `assert!` or `debug_assert!` macro call within the macro expansion"],["find_assert_args_inner",""],["find_assert_eq_args","Finds the arguments of an `assert_eq!` or `debug_assert_eq!` macro call within the macro expansion"],["find_assert_within_debug_assert",""],["first_node_in_macro","If `node` is the “first node” in a macro expansion, returns `Some` with the `ExpnId` of the macro call site (i.e. the parent of the macro expansion). This generally means that `node` is the outermost node of an entire macro expansion, but there are some caveats noted below. This is useful for finding macro calls while visiting the HIR without processing the macro call at every node within its expansion."],["first_node_macro_backtrace","Like [`macro_backtrace`], but only returns macro calls where `node` is the “first node” of the macro call, as in [`first_node_in_macro`]."],["is_assert_arg",""],["is_format_macro","Returns true if a given Macro `DefId` is a format macro (e.g. `println!`)"],["is_panic","Is `def_id` of `std::panic`, `core::panic` or any inner implementation macros"],["macro_backtrace","Returns an iterator of macro expansions that created the given span. Note that desugaring expansions are skipped."],["parse_rt_fmt","Parses the `fmt` arg of `Arguments::new_v1_formatted(pieces, args, fmt, _)`"],["root_macro_call","If the macro backtrace of `span` has a macro call at the root expansion (i.e. not a nested macro call), returns `Some` with the `MacroCall`"],["root_macro_call_first_node","Like [`root_macro_call`], but only returns `Some` if `node` is the “first node” produced by the macro call, as in [`first_node_in_macro`]."],["span_from_inner","`Span::from_inner`, but for `rustc_parse_format`’s `InnerSpan`"],["span_is_local","Checks whether the span is from the root expansion or a locally defined macro"]],"macro":[["impl_hir_node",""]],"struct":[["FormatArg","A format argument, such as `{}`, `{foo:?}`."],["FormatArgsExpn","A parsed `format_args!` expansion."],["FormatArgsValues",""],["FormatParam","A `FormatParam` is any place in a `FormatArgument` that refers to a supplied value, e.g."],["FormatSpec","Specification for the formatting of an argument in the format string. See https://doc.rust-lang.org/std/fmt/index.html#formatting-parameters for the precise meanings."],["FormatString","The format string doesn’t exist in the HIR, so we reassemble it from source code"],["MacroCall","A macro call, like `vec![1, 2, 3]`."],["ParamPosition","The positions of a format argument’s value, precision and width"]],"trait":[["HirNode","A node with a `HirId` and a `Span`"]]};