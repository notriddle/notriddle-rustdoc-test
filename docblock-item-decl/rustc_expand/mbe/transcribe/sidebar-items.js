window.SIDEBAR_ITEMS = {"enum":[["Frame","An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`)."],["LockstepIterSize","An accumulator over a TokenTree to be used with `fold`. During transcription, we need to make sure that the size of each sequence and all of its nested sequences are the same as the sizes of all the matched (nested) sequences in the macro invocation. If they donâ€™t match, somebody has made a mistake (either the macro writer or caller)."]],"fn":[["count_repetitions","Used solely by the `count` meta-variable expression, counts the outer-most repetitions at a given optional nested depth."],["lockstep_iter_size","Given a `tree`, make sure that all sequences have the same length as the matches for the appropriate meta-vars in `interpolations`."],["lookup_cur_matched","Lookup the meta-var named `ident` and return the matched token tree from the invocation using the set of matches `interpolations`."],["matched_from_ident","Returns a `NamedMatch` item declared on the LHS given an arbitrary [Ident]"],["out_of_bounds_err","Used by meta-variable expressions when an user input is out of the actual declared bounds. For example, index(999999) in an repetition of only three elements."],["transcribe","This can do Macro-By-Example transcription."],["transcribe_metavar_expr",""]],"struct":[["Marker",""]]};