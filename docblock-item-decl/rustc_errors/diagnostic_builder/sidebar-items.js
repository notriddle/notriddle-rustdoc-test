window.SIDEBAR_ITEMS = {"enum":[["DiagnosticBuilderState",""]],"macro":[["forward","In general, the `DiagnosticBuilder` uses deref to allow access to the fields and methods of the embedded `diagnostic` in a transparent way. However, many of the methods are intended to be used in a chained way, and hence ought to return `self`. In that case, we can’t just naively forward to the method on the `diagnostic`, because the return type would be a `&Diagnostic` instead of a `&DiagnosticBuilder<'a>`. This `forward!` macro makes it easy to declare such methods on the builder."]],"mod":[["sealed_level_is_error","Private module for sealing the `IsError` helper trait."]],"struct":[["DiagnosticBuilder","Used for emitting structured error messages and other diagnostic information."],["DiagnosticBuilderInner","This type exists only for `DiagnosticBuilder::forget_guarantee`, because it:"],["LintDiagnosticBuilder","Wrapper around a `DiagnosticBuilder` for creating lints."]],"trait":[["EmissionGuarantee","Trait for types that `DiagnosticBuilder::emit` can return as a “guarantee” (or “proof”) token that the emission happened."]]};