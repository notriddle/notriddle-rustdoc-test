window.SIDEBAR_ITEMS = {"constant":[["PTHREAD_MUTEX_NORMAL_FLAG","A flag that allows to distinguish `PTHREAD_MUTEX_NORMAL` from `PTHREAD_MUTEX_DEFAULT`. Since in `glibc` they have the same numeric values, but different behaviour, we need a way to distinguish them. We do this by setting this bit flag to the `PTHREAD_MUTEX_NORMAL` mutexes. See the comment in `pthread_mutexattr_settype` function."]],"fn":[["cond_get_clock_id",""],["cond_get_id",""],["cond_get_or_create_id",""],["cond_set_clock_id",""],["cond_set_id",""],["condattr_get_clock_id",""],["condattr_set_clock_id",""],["is_mutex_kind_default",""],["is_mutex_kind_normal",""],["layout_of_maybe_uninit",""],["mutex_get_id",""],["mutex_get_kind",""],["mutex_get_or_create_id",""],["mutex_set_id",""],["mutex_set_kind",""],["mutexattr_get_kind",""],["mutexattr_set_kind",""],["post_cond_signal","After a thread waiting on a condvar was signalled: Reacquire the conditional variable and remove the timeout callback if any was registered."],["reacquire_cond_mutex","Try to reacquire the mutex associated with the condition variable after we were signaled."],["release_cond_mutex_and_block","Release the mutex associated with the condition variable because we are entering the waiting state."],["rwlock_get_id",""],["rwlock_get_or_create_id",""]],"trait":[["EvalContextExt",""]]};