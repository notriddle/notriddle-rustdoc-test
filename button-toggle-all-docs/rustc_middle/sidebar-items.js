window.SIDEBAR_ITEMS = {"macro":[["CloneLiftImpls",""],["EnumTypeTraversalImpl",""],["TrivialTypeTraversalAndLiftImpls",""],["TrivialTypeTraversalImpls","Used for types that are `Copy` and which do not care arena allocated data (i.e., donâ€™t need to be folded)."],["__impl_decoder_methods",""],["arena_types","This higher-order macro declares a list of types which can be allocated by `Arena`."],["bug",""],["err_exhaust",""],["err_inval",""],["err_machine_stop",""],["err_ub",""],["err_ub_format",""],["err_unsup",""],["err_unsup_format",""],["implement_ty_decoder",""],["make_dep_kind_array",""],["parameterized_over_tcx",""],["rustc_query_append",""],["rustc_query_description",""],["span_bug",""],["throw_exhaust",""],["throw_inval",""],["throw_machine_stop",""],["throw_ub",""],["throw_ub_format",""],["throw_unsup",""],["throw_unsup_format",""],["trivially_parameterized_over_tcx",""]],"mod":[["arena",""],["dep_graph",""],["error",""],["hir","HIR datatypes. See the rustc dev guide for more info."],["infer",""],["lint",""],["macros",""],["metadata",""],["middle",""],["mir","MIR datatypes and passes. See the rustc dev guide for more info."],["query","Defines the various compiler queries."],["thir","THIR datatypes and definitions. See the rustc dev guide for more info."],["traits","Trait Resolution. See the rustc dev guide for more information on how this works."],["ty","Defines how the compiler represents types internally."],["util",""],["values",""]]};