window.SIDEBAR_ITEMS = {"enum":[["MonoItemCollectionMode",""]],"fn":[["check_recursion_limit",""],["check_type_length_limit",""],["collect_const_value",""],["collect_crate_mono_items",""],["collect_items_rec","Collect all monomorphized items reachable from `starting_point`, and emit a note diagnostic if a post-monorphization error is encountered during a collection step."],["collect_miri","Scans the miri alloc in order to find function calls, closures, and drop-glue."],["collect_neighbours","Scans the MIR in order to find function calls, closures, and drop-glue."],["collect_roots",""],["create_fn_mono_item",""],["create_mono_items_for_default_impls",""],["create_mono_items_for_vtable_methods","Creates a `MonoItem` for each method that is referenced by the vtable for the given trait/impl pair."],["find_vtable_types_for_unsizing","For a given pair of source and target type that occur in an unsizing coercion, this function finds the pair of types that determines the vtable linking them."],["item_requires_monomorphization",""],["should_codegen_locally","Returns `true` if we should codegen an instance in the local crate, or returns `false` if we can just link to the upstream crate and therefore don’t need a mono item."],["shrunk_instance_name","Format instance name that is already known to be too long for rustc. Show only the first and last 32 characters to avoid blasting the user’s terminal with thousands of lines of type-name."],["visit_drop_use",""],["visit_fn_use",""],["visit_instance_use",""]],"struct":[["InliningMap","Maps every mono item to all mono items it references in its body."],["MirNeighborCollector",""],["MonoItems","Struct to store mono items in each collecting and if they should be inlined. We call `instantiation_mode` to get their inlining status when inserting new elements, which avoids calling it in `inlining_map.lock_mut()`. See the `collect_items_rec` implementation below."],["RootCollector",""]]};