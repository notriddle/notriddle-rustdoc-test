window.SIDEBAR_ITEMS = {"enum":[["CheckLintNameResult",""],["FindLintError",""],["Level","Setting for how to handle a lint."]],"fn":[["check_ast_node",""],["check_crate","Performs lint checking on a crate."],["lint_mod",""],["new_lint_store",""],["provide",""],["register_builtins","Tell the `LintStore` about all the built-in lints (the ones defined in this crate and the ones defined in `rustc_session::lint::builtin`)."],["register_internals",""],["unerased_lint_store","Extract the `LintStore` from the query context. This function exists because weâ€™ve erased `LintStore` as `dyn Any` in the context."]],"macro":[["declare_combined_early_lint_pass",""],["declare_combined_early_pass",""],["declare_combined_late_lint_pass",""],["declare_combined_late_pass",""],["early_lint_methods",""],["early_lint_passes",""],["expand_combined_early_lint_pass_method",""],["expand_combined_early_lint_pass_methods",""],["expand_combined_late_lint_pass_method",""],["expand_combined_late_lint_pass_methods",""],["late_lint_methods",""],["late_lint_mod_passes",""],["late_lint_passes",""],["pre_expansion_lint_passes",""]],"mod":[["array_into_iter",""],["builtin","Lints in the Rust compiler."],["context","Implementation of lint checking."],["early","Implementation of lint checking."],["enum_intrinsics_non_enums",""],["errors",""],["expect",""],["hidden_unicode_codepoints",""],["internal","Some lints that are only useful in the compiler or crates that use compiler internals, such as Clippy."],["late","Implementation of lint checking."],["let_underscore",""],["levels",""],["methods",""],["non_ascii_idents",""],["non_fmt_panic",""],["nonstandard_style",""],["noop_method_call",""],["pass_by_value",""],["passes",""],["redundant_semicolon",""],["traits",""],["types",""],["unused",""]],"static":[["ARRAY_INTO_ITER","The `array_into_iter` lint detects calling `into_iter` on arrays."]],"struct":[["BufferedEarlyLint","Lints that are buffered up early on in the `Session` before the `LintLevels` is calculated."],["BuiltinCombinedEarlyLintPass",""],["BuiltinCombinedLateLintPass",""],["BuiltinCombinedModuleLateLintPass",""],["BuiltinCombinedPreExpansionLintPass",""],["EarlyContext","Context for lint checking of the AST, after expansion, before lowering to HIR."],["FutureIncompatibleInfo","Extra information for a future incompatibility lint."],["LateContext","Context for lint checking outside of type inference."],["Lint","Specification of a single lint."],["LintId","Identifies a lint known to the compiler."],["LintStore","Information about the registered lints."]],"trait":[["EarlyCheckNode","Early lints work on different nodes - either on the crate root, or on freshly loaded modules. This trait generalizes over those nodes."],["EarlyLintPass",""],["LateLintPass",""],["LintContext",""],["LintPass",""]],"type":[["LintArray",""]]};