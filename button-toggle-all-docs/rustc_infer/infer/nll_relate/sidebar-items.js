window.SIDEBAR_ITEMS = {"enum":[["NormalizationStrategy",""]],"struct":[["BoundRegionScope",""],["ScopeInstantiator","When we encounter a binder like `for<..> fn(..)`, we actually have to walk the `fn` value to find all the values bound by the `for` (these are not explicitly present in the ty representation right now). This visitor handles that: it descends the type, tracking binder depth, and finds late-bound regions targeting the `for<..`>.  For each of those, it creates an entry in `bound_region_scope`."],["TypeGeneralizer","The “type generalizer” is used when handling inference variables."],["TypeRelating",""],["UniversallyQuantified",""]],"trait":[["TypeRelatingDelegate",""],["VidValuePair","When we instantiate an inference variable with a value in `relate_ty_var`, we always have the pair of a `TyVid` and a `Ty`, but the ordering may vary (depending on whether the inference variable was found on the `a` or `b` sides). Therefore, this trait allows us to factor out common code, while preserving the order when needed."]]};