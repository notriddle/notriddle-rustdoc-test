window.SIDEBAR_ITEMS = {"enum":[["DictKey","Substitution dictionary key."],["TyQ","Type and extended type qualifiers."]],"fn":[["compress","Substitutes a component if found in the substitution dictionary (see https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-compression)."],["encode_const","Encodes a const using the Itanium C++ ABI as a literal argument (see https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling.literal)."],["encode_fnsig","Encodes a FnSig using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["encode_predicate","Encodes a predicate using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["encode_predicates","Encodes predicates using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["encode_region","Encodes a region using the Itanium C++ ABI as a vendor extended type."],["encode_substs","Encodes substs using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["encode_ty","Encodes a ty:Ty using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["encode_ty_name","Encodes a ty:Ty name, including its crate and path disambiguators and names."],["is_c_void_ty","Returns whether a `ty::Ty` is `c_void`."],["to_disambiguator","Converts a number to a disambiguator (see https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html)."],["to_seq_id","Converts a number to a sequence number (see https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.seq-id)."],["transform_substs","Transforms substs for being encoded and used in the substitution dictionary."],["transform_ty",""],["typeid_for_fnabi","Returns a type metadata identifier for the specified FnAbi using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."],["typeid_for_fnsig","Returns a type metadata identifier for the specified FnSig using the Itanium C++ ABI with vendor extended type qualifiers and types for Rust types that are not used at the FFI boundary."]],"struct":[["TypeIdOptions","Options for typeid_for_fnabi and typeid_for_fnsig."]],"type":[["EncodeTyOptions","Options for encode_ty."],["TransformTyOptions","Options for transform_ty."]]};