window.SIDEBAR_ITEMS = {"constant":[["CFG_ATTR_GRAMMAR_HELP",""],["CFG_ATTR_NOTE_REF",""],["MACRO_ARGUMENTS",""]],"fn":[["error_malformed_cfg_attr_missing",""],["fake_token_stream_for_crate",""],["fake_token_stream_for_item",""],["file_to_source_file","Given a session and a path and an optional span (for error reporting), adds the path to the session’s `source_map` and returns the new `source_file`."],["maybe_file_to_stream","Given a source file, produces a sequence of token trees. Returns any buffered errors from parsing the token stream."],["maybe_new_parser_from_source_str","Creates a new parser from a source string. Returns any buffered errors from lexing the initial token stream."],["maybe_source_file_to_parser","Given a session and a `source_file`, return a parser. Returns any buffered errors from lexing the initial token stream."],["new_parser_from_file","Creates a new parser, handling errors as appropriate if the file doesn’t exist. If a span is given, that is used on an error as the source of the problem."],["new_parser_from_source_str","Creates a new parser from a source string."],["parse_cfg_attr",""],["parse_crate_attrs_from_file",""],["parse_crate_attrs_from_source_str",""],["parse_crate_from_file",""],["parse_crate_from_source_str",""],["parse_in","Runs the given subparser `f` on the tokens of the given `attr`’s item."],["parse_stream_from_source_str",""],["source_file_to_parser","Given a session and a `source_file`, returns a parser."],["source_file_to_stream","Given a `source_file`, produces a sequence of token trees."],["stream_to_parser","Given a stream and the `ParseSess`, produces a parser."],["try_file_to_source_file","Given a session and a path and an optional span (for error reporting), add the path to the session’s source_map and return the new source_file or error when a file can’t be read."]],"macro":[["maybe_recover_from_interpolated_ty_qpath","If the next tokens are ill-formed `$ty::` recover them as `<$ty>::`."],["maybe_whole","Like `maybe_whole_expr`, but for things other than expressions."],["panictry_buffer","A variant of ‘panictry!’ that works on a Vec instead of a single DiagnosticBuilder."]],"mod":[["lexer",""],["parser",""],["validate_attr","Meta-syntax validation logic of attributes for post-expansion."]]};