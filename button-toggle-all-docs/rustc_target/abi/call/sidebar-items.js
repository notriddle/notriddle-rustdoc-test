window.SIDEBAR_ITEMS = {"enum":[["AdjustForForeignAbiError","Error produced by attempting to adjust a `FnAbi`, for a “foreign” ABI."],["ArgExtension","Sometimes an ABI requires small integers to be extended to a full or partial register. This enum defines if this extension should be zero-extension or sign-extension when necessary. When it is not necessary to extend the argument, this enum is ignored."],["Conv",""],["HomogeneousAggregate","Return value from the `homogeneous_aggregate` test function."],["PassMode",""],["RegKind",""]],"macro":[["reg_ctor",""]],"mod":[["aarch64",""],["amdgpu",""],["arm",""],["attr_impl",""],["avr","LLVM-frontend specific AVR calling convention implementation."],["bpf",""],["hexagon",""],["m68k",""],["mips",""],["mips64",""],["msp430",""],["nvptx64",""],["powerpc",""],["powerpc64",""],["riscv",""],["s390x",""],["size_asserts",""],["sparc",""],["sparc64",""],["wasm",""],["x86",""],["x86_64",""],["x86_win64",""]],"struct":[["ArgAbi","Information about how to pass an argument to, or return a value from, a function, under some ABI."],["ArgAttribute",""],["ArgAttributes","A compact representation of LLVM attributes (at least those relevant for this module) that can be manipulated without interacting with LLVM’s Attribute machinery."],["CastTarget",""],["FnAbi","Metadata describing how the arguments to a native function should be passed in order to respect the native ABI."],["Heterogeneous","Error from the `homogeneous_aggregate` test function, indicating there are distinct leaf fields passed in different ways, or this is uninhabited."],["Reg",""],["Uniform","An argument passed entirely registers with the same kind (e.g., HFA / HVA on PPC64 and AArch64)."]]};