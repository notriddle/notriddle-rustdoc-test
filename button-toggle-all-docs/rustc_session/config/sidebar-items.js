window.SIDEBAR_ITEMS = {"constant":[["CG_OPTIONS",""],["DWARF_OBJECT_EXT",""],["RLINK_EXT",""],["RUST_CGU_EXT",""],["Z_OPTIONS",""]],"enum":[["CFGuard","The different settings that the `-C control-flow-guard` flag can have."],["CFProtection","The different settings that the `-Z cf-protection` flag can have."],["CrateType",""],["DebugInfo",""],["EntryFnType",""],["ErrorOutputType","The type of diagnostics output to generate."],["ExternLocation",""],["IncrementalStateAssertion","Used with `-Z assert-incr-state`."],["Input",""],["InstrumentCoverage","The different settings that the `-C instrument-coverage` flag can have."],["JsonUnusedExterns","Report unused externs in event stream"],["LdImpl",""],["LinkerPluginLto",""],["Lto","This is what the `LtoCli` values get mapped to after resolving defaults and and taking other command line options into account."],["LtoCli","The different settings that the `-C lto` flag can have."],["MirSpanview","The different settings that the `-Z dump_mir_spanview` flag can have. `Statement` generates a document highlighting each span of every statement (including terminators). `Terminator` and `Block` highlight a single span per `BasicBlock`: the span of the block’s `Terminator`, or a computed span for the block, representing the entire range, covering the block’s terminator and all of its statements."],["OomStrategy","Default behavior to use in out-of-memory situations."],["OptLevel",""],["OptionStability",""],["OutputType",""],["PAuthKey",""],["Passes",""],["PpAstTreeMode",""],["PpHirMode",""],["PpMode",""],["PpSourceMode",""],["PrintRequest",""],["ProcMacroExecutionStrategy","How to run proc-macro code when building this crate"],["SplitDwarfKind","Split debug-information is enabled by `-C split-debuginfo`, this enum is only used if split debug-information is enabled (in either `Packed` or `Unpacked` modes), and the platform uses DWARF for debug-information."],["Strip","The different settings that the `-C strip` flag can have."],["SwitchWithOptPath",""],["SymbolManglingVersion",""],["TrimmedDefPaths","Parameter to control path trimming."],["WasiExecModel",""]],"fn":[["build_configuration",""],["build_session_options",""],["build_target_config",""],["check_error_format_stability",""],["check_thread_count",""],["collect_print_requests",""],["default_configuration",""],["default_lib_output",""],["get_cmd_lint_options",""],["host_triple",""],["make_crate_type_option",""],["parse_assert_incr_state",""],["parse_color","Parses the `--color` flag."],["parse_crate_edition",""],["parse_crate_types_from_list",""],["parse_error_format","Parses the `--error-format` flag."],["parse_externs",""],["parse_json","Parse the `--json` flag."],["parse_libs",""],["parse_native_lib_kind",""],["parse_native_lib_modifiers",""],["parse_opt_level",""],["parse_output_types",""],["parse_pretty",""],["parse_remap_path_prefix",""],["parse_target_triple",""],["rustc_optgroups","Returns all rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc."],["rustc_short_optgroups","Returns the “short” subset of the rustc command line options, including metadata for each option, such as whether the option is part of the stable long-term interface for rustc."],["select_debuginfo",""],["should_override_cgus_and_disable_thinlto",""],["to_crate_check_config","Converts the crate `--check-cfg` options from `String` to `Symbol`. `rustc_interface::interface::Config` accepts this in the compiler configuration, but the symbol interner is not yet set up then, so we must convert it later."],["to_crate_config","Converts the crate `cfg!` configuration from `String` to `Symbol`. `rustc_interface::interface::Config` accepts this in the compiler configuration, but the symbol interner is not yet set up then, so we must convert it later."]],"mod":[["dep_tracking","Command-line arguments passed to the compiler have to be incorporated with the dependency tracking system for incremental compilation. This module provides some utilities to make this more convenient."],["nightly_options",""],["opt",""],["sigpipe","NOTE: Keep these constants in sync with `library/std/src/sys/unix/mod.rs`!"]],"struct":[["BranchProtection",""],["CheckCfg","The parsed `--check-cfg` options"],["CodegenOptions",""],["ExternEntry",""],["Externs","Use tree-based collections to cheaply get a deterministic `Hash` implementation. Do not switch `BTreeMap` or `BTreeSet` out for an unsorted container type! That would break dependency tracking for command-line arguments."],["JsonConfig","Possible json config files"],["LocationDetail","The different settings that can be enabled via the `-Z location-detail` flag."],["Options","The top-level command-line options struct."],["OutputFilenames",""],["OutputTypes","Use tree-based collections to cheaply get a deterministic `Hash` implementation. Do not switch `BTreeMap` out for an unsorted container type! That would break dependency tracking for command-line arguments. Also only hash keys, since tracking should only depend on the output types, not the paths they’re written to."],["PacRet",""],["RustcOptGroup",""],["UnstableOptions",""]]};