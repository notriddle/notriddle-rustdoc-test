window.SIDEBAR_ITEMS = {"constant":[["DW_ATE_UTF",""],["DW_ATE_boolean",""],["DW_ATE_float",""],["DW_ATE_signed",""],["DW_ATE_unsigned",""],["DW_LANG_RUST",""],["NO_GENERICS","A function that returns an empty list of generic parameter debuginfo nodes."],["NO_SCOPE_METADATA",""],["UNKNOWN_COLUMN_NUMBER",""],["UNKNOWN_LINE_NUMBER",""]],"fn":[["build_basic_type_di_node",""],["build_closure_env_di_node","Builds the debuginfo node for a closure environment."],["build_compile_unit_di_node",""],["build_dyn_type_di_node","Create debuginfo for `dyn SomeTrait` types. Currently these are empty structs we with the correct type name (e.g. “dyn SomeTrait<Foo, Item=u32> + Sync”)."],["build_field_di_node","Creates a `DW_TAG_member` entry inside the DIE represented by the given `type_di_node`."],["build_fixed_size_array_di_node","Creates debuginfo for a fixed size array (e.g. `[u64; 123]`). For slices (that is, “arrays” of unknown size) use [build_slice_type_di_node]."],["build_foreign_type_di_node",""],["build_generic_type_param_di_nodes","Computes the type parameters for a type, if any, for the given metadata."],["build_global_var_di_node","Creates debug information for the given global variable."],["build_param_type_di_node",""],["build_pointer_or_reference_di_node","Creates debuginfo for built-in pointer-like things:"],["build_slice_type_di_node","Create debuginfo for `[T]` and `str`. These are unsized."],["build_struct_type_di_node","Creates the debuginfo node for a Rust struct type. Maybe be a regular struct or a tuple-struct."],["build_subroutine_type_di_node",""],["build_tuple_type_di_node","Builds the DW_TAG_structure_type debuginfo node for a Rust tuple type."],["build_union_type_di_node","Build the debuginfo node for a Rust `union` type."],["build_upvar_field_di_nodes","Builds the DW_TAG_member debuginfo nodes for the upvars of a closure or generator. For a generator, this will handle upvars shared by all states."],["build_vtable_type_di_node","Generates LLVM debuginfo for a vtable."],["closure_saved_names_of_captured_variables","Returns names of captured upvars for closures and generators."],["create_vtable_di_node","Creates debug information for the given vtable, which is for the given type."],["extend_scope_to_file","Creates an “extension” of an existing `DIScope` into another file."],["file_metadata",""],["generator_layout_and_saved_local_names",""],["hex_encode",""],["recursion_marker_type_di_node",""],["size_and_align_of","Extract size and alignment from a TyAndLayout."],["tuple_field_name",""],["type_di_node","Get the debuginfo node for the given type."],["unknown_file_metadata",""],["vcall_visibility_metadata",""]],"macro":[["return_if_di_node_created_in_meantime","Returns from the enclosing function if the type debuginfo node with the given unique ID can be found in the type map."]],"mod":[["enums",""],["type_map",""]],"trait":[["MsvcBasicName",""]],"type":[["SmallVec",""]]};